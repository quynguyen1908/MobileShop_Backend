import { CheckInventoryInput, checkInventorySchema } from '@app/contracts/ai';
import { DynamicStructuredTool } from '@langchain/core/tools';
import { Injectable } from '@nestjs/common';
import { tool } from '@langchain/core/tools';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
import { catchError, firstValueFrom } from 'rxjs';
import { Inventory } from '@app/contracts/phone';
import { extractErrorMessage, formatDate } from '@app/contracts/utils';
import { ApiResponseDto } from '@app/contracts/ai/ai.dto';
import { AppError } from '@app/contracts';

@Injectable()
export class InventoryToolService {
  private readonly inventoryServiceUrl: string;

  constructor(
    private configService: ConfigService,
    private readonly httpService: HttpService,
  ) {
    this.inventoryServiceUrl = this.configService.get<string>(
      'INVENTORY_SERVICE_URL',
      'http://localhost:3000/api/v1/inventory',
    );
  }

  async checkInventory(sku: string): Promise<string> {
    try {
      const { data: response } = await firstValueFrom(
        this.httpService
          .get<
            ApiResponseDto<Inventory>
          >(`${this.inventoryServiceUrl}/sku/${sku}`)
          .pipe(
            catchError((error: unknown) => {
              console.error(`Error checking inventory for SKU ${sku}:`, error);
              const errorMessage = extractErrorMessage(error);
              throw AppError.from(new Error(errorMessage), 400).withLog(
                `Failed to check inventory: ${errorMessage}`,
              );
            }),
          ),
      );

      const inventory = response?.data;
      if (inventory) {
        let result = `Th√¥ng tin t·ªìn kho cho s·∫£n ph·∫©m SKU: ${inventory.sku}\n\n`;
        result += `üì¶ S·ªë l∆∞·ª£ng trong kho: ${inventory.stockQuantity} s·∫£n ph·∫©m\n`;

        result +=
          inventory.stockQuantity > 20
            ? `‚úÖ Tr·∫°ng th√°i: C√≤n nhi·ªÅu h√†ng\n`
            : inventory.stockQuantity > 0
              ? `‚ö†Ô∏è Tr·∫°ng th√°i: S·∫Øp h·∫øt h√†ng\n`
              : `‚ùå Tr·∫°ng th√°i: H·∫øt h√†ng\n`;

        const updatedAt = inventory.updatedAt
          ? formatDate(new Date(inventory.updatedAt))
          : 'Kh√¥ng x√°c ƒë·ªãnh';

        result += `üïí C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${updatedAt}\n`;
        result += `üÜî M√£ bi·∫øn th·ªÉ s·∫£n ph·∫©m: ${inventory.variantId}`;

        return result;
      }

      const errorDetail =
        typeof response?.errors === 'string'
          ? response.errors
          : JSON.stringify(response?.errors ?? '');

      return response?.errors
        ? `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ªìn kho: ${errorDetail}`
        : `Kh√¥ng t√¨m th·∫•y th√¥ng tin t·ªìn kho cho SKU ${sku}. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ SKU.`;
    } catch (error: unknown) {
      console.error(`Failed to check inventory for SKU ${sku}:`, error);
      return `Kh√¥ng th·ªÉ ki·ªÉm tra t·ªìn kho cho SKU ${sku}. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£.`;
    }
  }

  createCheckInventoryTool(): DynamicStructuredTool<any> {
    return tool(
      async (input: CheckInventoryInput): Promise<string> =>
        this.checkInventory(input.sku),
      {
        name: 'checkInventory',
        description: `G·ªçi API ƒë·ªÉ ki·ªÉm tra t·ªìn kho cho m·ªôt SKU nh·∫•t ƒë·ªãnh.
        B·∫•t c·ª© c√¢u h·ªèi n√†o li√™n quan ƒë·∫øn vi·ªác ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho, b·∫°n n√™n s·ª≠ d·ª•ng c√¥ng c·ª• n√†y.
        V√≠ d·ª•: "Ki·ªÉm tra t·ªìn kho cho SKU 12345".
        N·∫øu b·∫°n kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ SKU, h√£y h·ªèi ng∆∞·ªùi d√πng ƒë·ªÉ l·∫•y SKU ch√≠nh x√°c tr∆∞·ªõc khi g·ªçi c√¥ng c·ª• n√†y.
        N·∫øu b·∫°n kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y tr·∫£ l·ªùi r·∫±ng b·∫°n kh√¥ng bi·∫øt thay v√¨ ƒëo√°n.`,
        schema: checkInventorySchema,
      },
    );
  }
}
