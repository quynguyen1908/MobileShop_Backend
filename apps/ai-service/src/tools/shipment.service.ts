import { ShippingQuoteInput, shippingQuoteSchema } from '@app/contracts/ai';
import { DynamicStructuredTool } from '@langchain/core/tools';
import { Injectable } from '@nestjs/common';
import { tool } from '@langchain/core/tools';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
import path from 'path';
import fs from 'fs';
import csv from 'csv-parser';
import {
  GHNShippingResponse,
  type LocationData,
} from '@app/contracts/interface';
import { catchError, firstValueFrom } from 'rxjs';
import { formatCurrency } from '@app/contracts/utils';
import { normalizeText } from '@app/contracts/utils';

interface LocationResult {
  wardId: number;
  districtId: number;
  found: boolean;
}

@Injectable()
export class ShipmentToolService {
  private readonly csvFilePath: string;
  private readonly ghnApiUrl: string;
  private readonly ghnToken: string;
  private readonly ghnShopId: number;

  constructor(
    private configService: ConfigService,
    private readonly httpService: HttpService,
  ) {
    this.csvFilePath = path.join(process.cwd(), 'data/datasets', 'convert.csv');
    this.ghnApiUrl = this.configService.get<string>(
      'GHN_API_URL',
      'https://online-gateway.ghn.vn/shiip/public-api/v2',
    );
    this.ghnToken = this.configService.get<string>('GHN_API_KEY', '');
    this.ghnShopId = Number(this.configService.get<string>('GHN_SHOP_ID', '0'));
  }

  async findLocationIds(
    commune: string,
    province: string,
  ): Promise<LocationResult> {
    return new Promise((resolve, reject) => {
      if (!fs.existsSync(this.csvFilePath)) {
        console.error(`Location CSV file not found at: ${this.csvFilePath}`);
        resolve({ wardId: 0, districtId: 0, found: false });
        return;
      }

      const matchingRecords: LocationData[] = [];

      fs.createReadStream(this.csvFilePath)
        .pipe(csv())
        .on('data', (row: LocationData) => {
          const normalizedInputCommune = normalizeText(commune);
          const normalizedInputProvince = normalizeText(province);

          const normalizedWardName = normalizeText(row.WardName || '');
          const normalizedWardNameNew = normalizeText(row.WardName_New || '');
          const normalizedProvinceName = normalizeText(row.ProvinceName || '');
          const normalizedProvinceNameNew = normalizeText(
            row.ProvinceName_New || '',
          );

          const communeMatches =
            normalizedWardName.includes(normalizedInputCommune) ||
            normalizedWardNameNew.includes(normalizedInputCommune) ||
            normalizedInputCommune.includes(normalizedWardName) ||
            normalizedInputCommune.includes(normalizedWardNameNew);

          const provinceMatches =
            normalizedProvinceName.includes(normalizedInputProvince) ||
            normalizedProvinceNameNew.includes(normalizedInputProvince) ||
            normalizedInputProvince.includes(normalizedProvinceName) ||
            normalizedInputProvince.includes(normalizedProvinceNameNew);

          if (communeMatches && provinceMatches) {
            matchingRecords.push(row);
          }
        })
        .on('end', () => {
          if (matchingRecords.length > 0) {
            const record = matchingRecords[0];

            resolve({
              wardId: parseInt(record.WardID),
              districtId: parseInt(record.DistrictID),
              found: true,
            });
          } else {
            console.log(
              `No matching location found for commune "${commune}" in province "${province}"`,
            );
            resolve({ wardId: 0, districtId: 0, found: false });
          }
        })
        .on('error', (error: unknown) => {
          console.error('Error reading CSV file:', error);
          reject(new Error(`Error reading CSV file: ${String(error)}`));
        });
    });
  }

  async getShippingQuote(commune: string, province: string): Promise<string> {
    try {
      const locationResult = await this.findLocationIds(commune, province);

      if (!locationResult.found) {
        return `Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªãa ch·ªâ cho x√£/ph∆∞·ªùng "${commune}" t·∫°i t·ªânh/th√†nh ph·ªë "${province}". Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë·ªãa ch·ªâ.`;
      }

      const { data: responseData } = await firstValueFrom(
        this.httpService
          .post<GHNShippingResponse>(
            `${this.ghnApiUrl}/shipping-order/fee`,
            {
              to_district_id: locationResult.districtId,
              to_ward_code: String(locationResult.wardId),
              weight: 400,
              service_type_id: 2,
            },
            {
              headers: {
                'Content-Type': 'application/json',
                Token: this.ghnToken,
                ShopId: this.ghnShopId,
              },
            },
          )
          .pipe(
            catchError((error: unknown) => {
              interface AxiosErrorResponse {
                response?: {
                  data?: {
                    message?: string;
                  };
                };
                message?: string;
              }

              const axiosError = error as AxiosErrorResponse;

              console.error(
                'GHN API Error:',
                axiosError?.response?.data ||
                  axiosError?.message ||
                  'Unknown error',
              );

              const errorMessage =
                axiosError?.response?.data?.message ||
                axiosError?.message ||
                'L·ªói kh√¥ng x√°c ƒë·ªãnh';

              throw new Error(`Kh√¥ng th·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn: ${errorMessage}`);
            }),
          ),
      );

      if (responseData.code === 200 && responseData.data) {
        const shippingData = responseData.data;

        let response = `üöö **B√°o gi√° v·∫≠n chuy·ªÉn ƒë·∫øn ${commune}, ${province}**\n\n`;
        response += `üí∞ Ph√≠ v·∫≠n chuy·ªÉn: ${formatCurrency(shippingData.total)}\n`;

        const serviceFee = shippingData.service_fee;
        if (serviceFee > 0 && serviceFee !== shippingData.total) {
          response += `üì¶ Ph√≠ d·ªãch v·ª• c∆° b·∫£n: ${formatCurrency(serviceFee)}\n`;
        }

        const insuranceFee = shippingData.insurance_fee;
        if (insuranceFee > 0) {
          response += `üîí Ph√≠ b·∫£o hi·ªÉm: ${formatCurrency(insuranceFee)}\n`;
        }

        const remoteAreaFee = shippingData.deliver_remote_areas_fee;
        if (remoteAreaFee > 0) {
          response += `üèûÔ∏è Ph·ª• ph√≠ v√πng xa: ${formatCurrency(remoteAreaFee)}\n`;
        }

        response += `‚è±Ô∏è Th·ªùi gian giao h√†ng ∆∞·ªõc t√≠nh: 2-3 ng√†y l√†m vi·ªác\n\n`;

        response += `‚ÑπÔ∏è V·∫≠n chuy·ªÉn b·ªüi ƒë·ªëi t√°c Giao H√†ng Nhanh (GHN)`;

        return response;
      } else {
        return `Kh√¥ng th·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£.`;
      }
    } catch (error: unknown) {
      console.error('Error fetching shipping quote:', error);
      return 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y b√°o gi√° v·∫≠n chuy·ªÉn. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
  }

  createShippingQuoteTool(): DynamicStructuredTool<any> {
    return tool(
      async (input: ShippingQuoteInput): Promise<string> =>
        this.getShippingQuote(input.commune, input.province),
      {
        name: 'getShippingQuote',
        description: `G·ªçi API ƒë·ªÉ nh·∫≠n b√°o gi√° v·∫≠n chuy·ªÉn d·ª±a tr√™n t·ªânh/th√†nh ph·ªë v√† x√£/ph∆∞·ªùng ƒë∆∞·ª£c cung c·∫•p.
        B·∫•t c·ª© c√¢u h·ªèi n√†o li√™n quan ƒë·∫øn vi·ªác b√°o gi√° v·∫≠n chuy·ªÉn, b·∫°n n√™n s·ª≠ d·ª•ng c√¥ng c·ª• n√†y.
        V√≠ d·ª•: "B√°o gi√° v·∫≠n chuy·ªÉn ƒë·∫øn x√£ XYZ, t·ªânh TP".
        N·∫øu b·∫°n kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ x√£/ph∆∞·ªùng ho·∫∑c t·ªânh/th√†nh ph·ªë, h√£y h·ªèi ng∆∞·ªùi d√πng ƒë·ªÉ l·∫•y th√¥ng tin ch√≠nh x√°c tr∆∞·ªõc khi g·ªçi c√¥ng c·ª• n√†y.
        N·∫øu b·∫°n kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y tr·∫£ l·ªùi r·∫±ng b·∫°n kh√¥ng bi·∫øt thay v√¨ ƒëo√°n.`,
        schema: shippingQuoteSchema,
      },
    );
  }
}
