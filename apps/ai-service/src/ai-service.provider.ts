import {
  AGENT_EXECUTOR,
  AGENT_TOOLS,
  OPENAI_CHAT_MODEL,
  OPENAI_EMBEDDINGS,
} from '@app/contracts';
import { Provider } from '@nestjs/common';
import { OpenAIEmbeddings, ChatOpenAI } from '@langchain/openai';
import { ConfigService } from '@nestjs/config';
import { OpenAIConfig } from '@app/contracts';
import { AgentExecutor, createToolCallingAgent } from 'langchain/agents';
import { Tool } from '@langchain/core/tools';
import { ChatPromptTemplate } from '@langchain/core/prompts';
import { InventoryToolService } from './tools/inventory.service';
import { OrderToolService } from './tools/order.service';
import { ShipmentToolService } from './tools/shipment.service';

export const OpenAIEmbeddingsProvider: Provider<OpenAIEmbeddings> = {
  provide: OPENAI_EMBEDDINGS,
  useFactory: (configService: ConfigService) => {
    const { apiKey, embeddingModel } =
      configService.get<OpenAIConfig>('openai') ?? {};
    return new OpenAIEmbeddings({
      openAIApiKey: apiKey,
      modelName: embeddingModel,
    });
  },
  inject: [ConfigService],
};

export const OpenAIChatModelProvider: Provider<ChatOpenAI> = {
  provide: OPENAI_CHAT_MODEL,
  useFactory: (configService: ConfigService) => {
    const { apiKey, chatModel } =
      configService.get<OpenAIConfig>('openai') ?? {};
    return new ChatOpenAI({
      openAIApiKey: apiKey,
      modelName: chatModel,
      temperature: 0.3,
      maxTokens: 2048,
    });
  },
  inject: [ConfigService],
};

export const AgentToolsProvider: Provider<Tool[]> = {
  provide: AGENT_TOOLS,
  useFactory: (
    inventoryService: InventoryToolService,
    orderService: OrderToolService,
    shipmentService: ShipmentToolService,
  ) => {
    const inventoryTool = inventoryService.createCheckInventoryTool();
    const orderTool = orderService.createTrackOrderTool();
    const shipmentTool = shipmentService.createShippingQuoteTool();
    return [inventoryTool, orderTool, shipmentTool];
  },
  inject: [InventoryToolService, OrderToolService, ShipmentToolService],
};

export const AgentExecutorProvider: Provider<AgentExecutor> = {
  provide: AGENT_EXECUTOR,
  useFactory: (llm: ChatOpenAI, tools: Tool[]) => {
    const agent = createToolCallingAgent({ llm, tools, prompt });

    return AgentExecutor.fromAgentAndTools({
      agent,
      tools,
      verbose: true,
    });
  },
  inject: [OPENAI_CHAT_MODEL, AGENT_TOOLS],
};

const prompt = ChatPromptTemplate.fromMessages([
  [
    'system',
    `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa **PHONEHUB** ‚Äì n·ªÅn t·∫£ng b√°n ƒëi·ªán tho·∫°i di ƒë·ªông h√†ng ƒë·∫ßu Vi·ªát Nam.
    
üéØ **NHI·ªÜM V·ª§ (TR·∫¢ L·ªúI THEO MARKDOWN):**
- T∆∞ v·∫•n kh√°ch h√†ng ch·ªçn ƒëi·ªán tho·∫°i theo nhu c·∫ßu & ng√¢n s√°ch.
- So s√°nh th√¥ng s·ªë k·ªπ thu·∫≠t gi·ªØa c√°c m·∫´u ƒëi·ªán tho·∫°i.
- Cung c·∫•p th√¥ng tin b·∫£o h√†nh, ƒë·ªïi tr·∫£ v√† khuy·∫øn m√£i.
- H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng, thanh to√°n v√† theo d√µi ƒë∆°n.

üí° **H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:**
1. Lu√¥n h·ªèi r√µ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng & ng√¢n s√°ch.
2. ƒê·ªÅ xu·∫•t t·ª´ 1‚Äì3 s·∫£n ph·∫©m theo d·∫°ng danh s√°ch Markdown (d√πng "-" ho·∫∑c "1.")
3. Gi·∫£i th√≠ch ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (d∆∞·ªõi 70 t·ª´).
4. Kh√¥ng d√πng HTML. Ch·ªâ d√πng Markdown.
5. Gi·ªØ th√°i ƒë·ªô chuy√™n nghi·ªáp, th√¢n thi·ªán, ki√™n nh·∫´n.
6. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y n√≥i r√µ thay v√¨ ƒëo√°n.

‚ùó Khi tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn s·∫£n ph·∫©m, h√£y s·ª≠ d·ª•ng d·ªØ li·ªáu s·∫£n ph·∫©m hi·ªán c√≥ trong {context} ƒë·ªÉ cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† c·∫≠p nh·∫≠t nh·∫•t.
N·∫øu th√¥ng tin kh√¥ng c√≥ trong {context}, h√£y n√≥i "Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng ch∆∞a c√≥ s·∫£n ph·∫©m ƒë√≥."

üß† **L∆∞u √Ω:** B·∫°n c√≥ th·ªÉ d√πng c√¥ng c·ª• ƒë·ªÉ tra c·ª©u t·ªìn kho, ph√≠ giao h√†ng ho·∫∑c tr·∫°ng th√°i ƒë∆°n h√†ng n·∫øu c·∫ßn. Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng Markdown.`,
  ],
  ['placeholder', '{chat_history}'],
  ['human', '{input}'],
  ['placeholder', '{agent_scratchpad}'],
  ['system', 'D·ªØ li·ªáu s·∫£n ph·∫©m hi·ªán c√≥:\n{context}'],
]);
