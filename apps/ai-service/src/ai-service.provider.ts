import {
  AGENT_EXECUTOR,
  AGENT_TOOLS,
  OPENAI_CHAT_MODEL,
  OPENAI_EMBEDDINGS,
} from '@app/contracts';
import { Provider } from '@nestjs/common';
import { OpenAIEmbeddings, ChatOpenAI } from '@langchain/openai';
import { ConfigService } from '@nestjs/config';
import { OpenAIConfig } from '@app/contracts';
import { AgentExecutor, createToolCallingAgent } from 'langchain/agents';
import { Tool } from '@langchain/core/tools';
import { ChatPromptTemplate } from '@langchain/core/prompts';

export const OpenAIEmbeddingsProvider: Provider<OpenAIEmbeddings> = {
  provide: OPENAI_EMBEDDINGS,
  useFactory: (configService: ConfigService) => {
    const { apiKey, embeddingModel } =
      configService.get<OpenAIConfig>('openai') ?? {};
    return new OpenAIEmbeddings({
      openAIApiKey: apiKey,
      modelName: embeddingModel,
    });
  },
  inject: [ConfigService],
};

export const OpenAIChatModelProvider: Provider<ChatOpenAI> = {
  provide: OPENAI_CHAT_MODEL,
  useFactory: (configService: ConfigService) => {
    const { apiKey, chatModel } =
      configService.get<OpenAIConfig>('openai') ?? {};
    return new ChatOpenAI({
      openAIApiKey: apiKey,
      modelName: chatModel,
      temperature: 0.3,
      maxTokens: 2048,
    });
  },
  inject: [ConfigService],
};

export const AgentToolsProvider: Provider<Tool[]> = {
  provide: AGENT_TOOLS,
  useFactory: () => {
    // TODO: Define and return your tools here
    return [];
  },
  inject: [],
};

export const AgentExecutorProvider: Provider<AgentExecutor> = {
  provide: AGENT_EXECUTOR,
  useFactory: (llm: ChatOpenAI, tools: Tool[]) => {
    const agent = createToolCallingAgent({ llm, tools, prompt });

    return AgentExecutor.fromAgentAndTools({
      agent,
      tools,
      verbose: true,
    });
  },
  inject: [OPENAI_CHAT_MODEL, AGENT_TOOLS],
};

const prompt = ChatPromptTemplate.fromMessages([
  [
    'system',
    `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa **PHONEHUB** ‚Äì n·ªÅn t·∫£ng b√°n ƒëi·ªán tho·∫°i di ƒë·ªông h√†ng ƒë·∫ßu Vi·ªát Nam.
        <br><br>
        üéØ **NHI·ªÜM V·ª§:**
        - T∆∞ v·∫•n kh√°ch h√†ng ch·ªçn ƒëi·ªán tho·∫°i ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch.
        - So s√°nh th√¥ng s·ªë k·ªπ thu·∫≠t gi·ªØa c√°c m·∫´u ƒëi·ªán tho·∫°i.
        - Cung c·∫•p th√¥ng tin v·ªÅ b·∫£o h√†nh, ƒë·ªïi tr·∫£ v√† khuy·∫øn m√£i hi·ªán c√≥.
        - H∆∞·ªõng d·∫´n quy tr√¨nh ƒë·∫∑t h√†ng, thanh to√°n v√† theo d√µi ƒë∆°n.
        <br>
        üí° **H∆Ø·ªöNG D·∫™N TRAO ƒê·ªîI:**
        1. Lu√¥n h·ªèi r√µ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng & ng√¢n s√°ch c·ªßa kh√°ch h√†ng.
        2. ƒê·ªÅ xu·∫•t 1‚Äì3 s·∫£n ph·∫©m ph√π h·ª£p.
        3. Gi·∫£i th√≠ch ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (d∆∞·ªõi 70 t·ª´).
        4. S·ª≠ d·ª•ng th·∫ª HTML (<ul>, <ol>, <br>) ƒë·ªÉ ƒë·ªãnh d·∫°ng.
        5. Gi·ªØ th√°i ƒë·ªô chuy√™n nghi·ªáp, th√¢n thi·ªán, ki√™n nh·∫´n.
        6. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y n√≥i r√µ thay v√¨ ƒëo√°n.
        <br>
        üß† **L∆∞u √Ω:** B·∫°n c√≥ th·ªÉ d√πng c√¥ng c·ª• s·∫µn c√≥ ƒë·ªÉ tra c·ª©u s·∫£n ph·∫©m, gi√°, khuy·∫øn m√£i, ho·∫∑c quy tr√¨nh ƒë∆°n h√†ng nh·∫±m tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t.`,
  ],
  ['placeholder', '{chat_history}'],
  ['placeholder', '{context}'],
  ['human', '{input}'],
  ['placeholder', '{agent_scratchpad}'],
]);
