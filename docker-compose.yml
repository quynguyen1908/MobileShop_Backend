services:
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
      target: ${NODE_ENV:-development}
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - '${PORT:-3000}:3000'
    env_file:
      - .env.docker
    image: quynguyen1908/phone-store-api-gateway:latest
    volumes:
      - ./apps/api-gateway:/app/apps/api-gateway:ro
      - ./libs:/app/libs:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
      target: ${NODE_ENV:-development}
    container_name: auth-service
    restart: unless-stopped
    env_file:
      - .env.docker
    image: quynguyen1908/phone-store-auth-service:latest
    volumes:
      - ./apps/auth-service:/app/apps/auth-service:ro
      - ./libs:/app/libs:ro
      - ./prisma/user:/app/prisma/user:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
      target: ${NODE_ENV:-development}
    container_name: user-service
    restart: unless-stopped
    env_file:
      - .env.docker
    image: quynguyen1908/phone-store-user-service:latest
    volumes:
      - ./apps/user-service:/app/apps/user-service:ro
      - ./libs:/app/libs:ro
      - ./prisma/user:/app/prisma/user:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  postgres:
    image: postgres:16-alpine
    container_name: postgres-multi-db
    restart: unless-stopped
    ports:
      - '127.0.0.1:5432:5432'
    env_file:
      - .env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - '127.0.0.1:5672:5672'
      - '127.0.0.1:15672:15672'
    env_file:
      - .env.docker
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  api_gateway_node_modules:
    driver: local
  auth_service_node_modules:
    driver: local
  user_service_node_modules:
    driver: local

networks:
  backend-network:
    driver: bridge